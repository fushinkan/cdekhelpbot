import asyncio
import logging

import redis.asyncio as aioredis
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage

#from api.setup_db import setup_db

from app.core.config import settings
from bot.handlers import router as handlers_router
from bot.middlewares.logging_middleware import LoggingMiddleware
from bot.middlewares.work_hours_middleware import WorkHoursMiddleware


async def startup(dispatcher: Dispatcher):
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


async def shutdown(dispatcher: Dispatcher):
    logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def start_bot():
    
    # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    redis = await aioredis.from_url(settings.REDIS_URL)
    storage = RedisStorage(redis)
    
    # –ë–∞–∑–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    bot = Bot(token=settings.SECRET_TOKEN)
    dp = Dispatcher(storage=storage)
    
    dp.startup.register(startup)
    dp.shutdown.register(shutdown)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.include_router(handlers_router)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middlewares
    dp.update.middleware(LoggingMiddleware())
    dp.update.middleware(WorkHoursMiddleware())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(start_bot())
    