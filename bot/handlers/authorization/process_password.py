import asyncio
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.types import Message
from sqlalchemy import update

from app.api.utils.security import verify_password
from app.db.base import async_session_factory
from app.api.handlers.get_user import UserInDB
from app.db.models.admins import Admins
from app.db.models.users import Users
from bot.utils.exceptions import IncorrectPasswordException
from bot.keyboards.admin import AdminKeyboards
from bot.keyboards.customer import CustomerKeyboards
from bot.utils.bot_utils import BotUtils
from bot.states.admin_auth import AdminAuth
from bot.utils.exceptions import UserNotExistsException
from bot.keyboards.backbuttons import BackButtons

router = Router()


@router.message(AdminAuth.password)
async def process_password(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.
    """
    
    await asyncio.sleep(0.2)
    
    
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message")
    role = data.get("role")
    phone = data.get("phone")
    
    async with async_session_factory() as session:
        if role == "admin":
            user = await UserInDB.get_admin_by_phone(phone_number=phone, session=session)
        elif role == "user":
            user = await UserInDB.get_client_by_phone(phone_number=phone, session=session)
        else:
            user = None
    
        
        if role is None and phone is None and user is None:
            sent = await message.answer(UserNotExistsException(UserNotExistsException.__doc__))
            await asyncio.sleep(3)
            await message.delete()
            await sent.delete()
            await state.clear()
            return
        
        
        entered_password = message.text.strip()
        
        
        try:
            if last_bot_message_id:
                await BotUtils.delete_prev_messages(obj=message, message_id=last_bot_message_id)
        except TelegramBadRequest:
            pass
        
        
        if verify_password(entered_password, user.hashed_psw):
            if role == "admin":
                await session.execute(
                    update(Admins)
                    .where(Admins.id == user.id)
                    .values(
                        telegram_id=message.from_user.id,
                        telegram_name=message.from_user.full_name,
                        is_logged=True
                    )
                )
                
                sent = await message.answer((
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.contractor}\n\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
                ), reply_markup=await AdminKeyboards.get_admin_kb())
                await message.delete()
                await state.clear()
                    
            elif role == "user":
                await session.execute(
                    update(Users)
                    .where(Users.id == user.id)
                    .values(
                        telegram_id=message.from_user.id,
                        telegram_name=message.from_user.full_name,
                        is_logged=True  
                    )
                )
                
                sent = await message.answer((
                "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é, –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏. üöÄ\n"
                "–ù–µ –Ω—É–∂–Ω–æ –ª–æ–º–∞—Ç—å –≥–æ–ª–æ–≤—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç! üíº‚ú®\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üòäüëç"
            ), reply_markup=await CustomerKeyboards.customer_kb())
                
                await asyncio.sleep(1)

                await state.clear()
                await state.update_data(phone=phone)
                
            await session.commit()
            
            
        else:
            sent = await message.answer(str(IncorrectPasswordException(IncorrectPasswordException.__doc__)), parse_mode="HTML", reply_markup=await BackButtons.back_to_phone())
            await state.update_data(last_bot_message=sent.message_id)

    
        
    

    
    

    
 