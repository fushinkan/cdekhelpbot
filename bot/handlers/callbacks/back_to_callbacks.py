import asyncio

from sqlalchemy import select
from aiogram.fsm.context import FSMContext
from aiogram import F, Router
from aiogram.types import CallbackQuery

from app.api.handlers.normalize import normalize_phone
from app.db.models.admins import Admins
from app.db.models.users import Users
from app.db.base import async_session_factory
from bot.keyboards.backbuttons import BackButtons
from bot.keyboards.basic import BasicKeyboards
from bot.keyboards.customer import CustomerKeyboards
from bot.states.auth import Auth
from bot.states.invoice import INVOICE_PROMPTS
from bot.utils.invoice import StateUtils


router = Router()

    
@router.callback_query(F.data == "back_to_welcoming_screen")
async def back_to_welcoming_screen(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ '–ù–∞–∑–∞–¥' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ë–î.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    telegram_id = callback.from_user.id
    telegram_name = callback.from_user.username
    
    async with async_session_factory() as session:
        
        admin = await session.execute(
            select(Admins)
            .where(Admins.telegram_id == telegram_id)
        )
        
        admin = admin.scalars().first()
        
        if admin:
            admin.is_logged = False
            admin.telegram_name = telegram_name

        else:
            user = await session.execute(
                select(Users)
                .where(Users.telegram_id == telegram_id)
            )   
             
            user = user.scalars().first()
            
            if user:
                user.is_logged = False
                user.telegram_name = telegram_name

        await session.commit()
    
    await asyncio.sleep(0.2)
    await state.clear()
    
    welcoming_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø ‚Äî —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –°–î–≠–ö.\n\n"
        "–†–∞–±–æ—Ç–∞—é –ø–æ –∞–¥—Ä–µ—Å—É:\n" 
        "–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –î–∞–Ω–∫–æ–≤,\n 1-–π –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫, 3\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
    )
    
    await callback.message.edit_text(welcoming_text, reply_markup=await BasicKeyboards.get_welcoming_kb())


@router.callback_query(F.data == "back_to_phone")
async def back_to_phone_screen(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ '–ù–∞–∑–∞–¥' –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    await asyncio.sleep(0.2)
    await callback.answer()
    await state.clear()
    
    sent = await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=await BackButtons.back_to_welcoming_screen())
    
    await state.update_data(last_bot_message=sent.message_id)
    await state.set_state(Auth.waiting_for_phone)
    
    
@router.callback_query(F.data.startswith("go_back_to_"))
async def go_back(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await state.get_data()
    
    await asyncio.sleep(0.3)
    
    prev_state = await StateUtils.pop_state_from_history(state=state)
    
    if prev_state is None:
        phone_raw = data.get("phone")
        phone = await normalize_phone(phone=phone_raw)
        
        await asyncio.sleep(0.2)
        await state.clear()
        await state.update_data(phone=phone)
    
        main_menu = (
            "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é, –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏. üöÄ\n"
            "–ù–µ –Ω—É–∂–Ω–æ –ª–æ–º–∞—Ç—å –≥–æ–ª–æ–≤—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ, –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç! üíº‚ú®\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üòäüëç"
        )
    
        await callback.message.edit_text(main_menu, reply_markup=await CustomerKeyboards.customer_kb())
        return 
    
    await state.set_state(prev_state)
    
    prompt = INVOICE_PROMPTS.get(prev_state.state)
    if prompt is None:
        await callback.answer("‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.")
        return
    
    text, keyboard_coroutine = prompt
    keyboard = await keyboard_coroutine()
    sent = await callback.message.edit_text(text, reply_markup=keyboard)
    
    await state.update_data(last_bot_message=sent.message_id)