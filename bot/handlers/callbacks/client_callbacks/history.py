from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.core.config import settings
from bot.keyboards.customer import CustomerKeyboards
from bot.utils.exceptions import EmptyHistoryException
from bot.utils.state import StateUtils
from bot.handlers.authorization.main_menu import proceed_to_main_menu

import httpx
import asyncio


router = Router()


@router.callback_query(F.data == "history")
async def show_user_orders_all_years_bot_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ –∫–Ω–æ–ø–∫–µ '–ò—Å—Ç–æ—Ä–∏—è' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–æ–¥–∞ –∑–∞–∫–∞–∑–æ–≤.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await StateUtils.prepare_next_state(obj=callback, state=state)

    user_data = data.get("user_data")
    telegram_id = user_data["telegram_id"] or callback.from_user.id
    user_id = user_data.get("id") 
    
    selected_client_id = data.get("selected_client_id")

    if selected_client_id:
        user_id = selected_client_id
    
    async with httpx.AsyncClient() as client:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –ø–æ Telegram ID
            resp_user = await client.get(f"{settings.BASE_FASTAPI_URL}/user/telegram/{telegram_id}")
            resp_user.raise_for_status()
            user_data = resp_user.json()
            user_id = user_data.get("id", None)
            user_data["selected_client_id"] = user_id
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≥–æ–¥–∞–º
            resp_years = await client.get(f"{settings.BASE_FASTAPI_URL}/history/{user_id}")
            resp_years.raise_for_status()
            years = resp_years.json().get("order_years", None)
            
        except httpx.HTTPStatusError as e:
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ (404)
            if e.response.status_code == 404:
                sent = await callback.message.answer(
                    str(EmptyHistoryException(EmptyHistoryException.__doc__))
                )
             
            else:
                sent = await callback.message.answer(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                
            await asyncio.sleep(5)
            await sent.delete()
            
            menu = await proceed_to_main_menu(message=callback.message, user_data=user_data, state=state)

            await state.update_data(last_bot_message=menu.message_id)
            return
        

    sent = await callback.message.answer(
        "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤.",
        reply_markup=await CustomerKeyboards.get_years_keyboard(years=years, data=user_data)
    )
    
    await callback.answer()
    await state.update_data(last_bot_message=sent.message_id, user_data=user_data)
    

@router.callback_query(F.data.startswith("year:"))
async def show_months_by_year(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ –≥–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Å—è—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –∑–∞–∫–∞–∑—ã.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await StateUtils.prepare_next_state(obj=callback, state=state)

    year = int(callback.data.split(":")[1])
    user_data = data.get("user_data")
    user_id = data.get("selected_client_id") or user_data["id"]
    
    
    async with httpx.AsyncClient() as client:
        try:
            resp_months = await client.get(f"{settings.BASE_FASTAPI_URL}/history/{user_id}/{year}")
            resp_months.raise_for_status()
            months = resp_months.json().get("order_months")
            
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 404:
                sent = await callback.message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥.")
            else:
                sent = await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)
            await sent.delete()
            return
    
    sent = await callback.message.answer(
        f"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü {year} –≥–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤.",
        reply_markup=await CustomerKeyboards.get_months_by_year_keyboard(months=months, year=year, data=user_data)
    )
    
    await callback.answer()
    await state.update_data(last_bot_message=sent.message_id, user_data=user_data)
    

@router.callback_query(F.data.startswith("month:"))
async def get_user_invoices_by_month_year(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ –º–µ—Å—è—Ü, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await StateUtils.prepare_next_state(obj=callback, state=state)

    user_data = data.get("user_data")
    user_id = data.get("selected_client_id") or user_data["id"]
    _, year_raw, month_raw = callback.data.split(":") 
    year, month = int(year_raw), int(month_raw)
    
    async with httpx.AsyncClient() as client:
        try:
            resp_inv = await client.get(f"{settings.BASE_FASTAPI_URL}/history/{user_id}/{year}/{month}")
            resp_inv.raise_for_status()
            invoices = resp_inv.json().get("invoices")
            
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 404:
                sent = await callback.message.answer("‚ùå –ù–∞–∫–ª–∞–¥–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                sent = await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await asyncio.sleep(5)
            await sent.delete()
            return
        
    sent = await callback.message.answer(
        f"üì¶ –í–æ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ {month:02}.{year}",
        reply_markup=await CustomerKeyboards.get_invoices_by_month_year_keyboard(
            invoices=invoices,  
            year=year
        )
    )

    await state.update_data(last_bot_message=sent.message_id)
    

@router.callback_query(F.data.startswith("invoice:"))
async def download_invoice_bot_handler(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –Ω–∞–∫–ª–∞–¥–Ω—É—é —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–µ.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    invoice_id = int(callback.data.split(":")[1])    
    
    async with httpx.AsyncClient() as client:
        try:
            resp_inv = await client.get(f"{settings.BASE_FASTAPI_URL}/history/download/{invoice_id}")
            resp_inv.raise_for_status()
            telegram_file_id = resp_inv.json().get("telegram_file_id")
            
            sent = await callback.message.answer_document(
                document=telegram_file_id,
                caption="üì¶ –í–∞—à–∞ –Ω–∞–∫–ª–∞–¥–Ω–∞—è"
            )
            
            await callback.answer()
            await state.update_data(last_bot_message=sent.message_id)
        
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 404:
                sent = await callback.message.answer(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                await asyncio.sleep(5)
                await sent.delete()
                return
            
        except Exception as e:
            sent = await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)
            await sent.delete()
            return