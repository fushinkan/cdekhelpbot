from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.core.config import settings
from bot.utils.state import StateUtils
from bot.states.send_invoice import SendInvoice
from bot.keyboards.admin import AdminKeyboards

import asyncio
import httpx


router = Router()


@router.callback_query(F.data == "confirm")
async def send_invoice_summary(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await StateUtils.prepare_next_state(obj=callback, state=state)
    data["user_full_name"] = callback.from_user.username
    data["user_id"] = callback.from_user.id
    data["username"] = callback.from_user.username

    await state.update_data(**data)
    
    await StateUtils.send_summary(
        message=callback,
        data=data,
        chat_id=settings.INVOICE_CHAT_ID
    )
    
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    
    
@router.callback_query(F.data == "allow_agreement")
async def send_contractor_summary(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await StateUtils.prepare_next_state(obj=callback, state=state)
    data["user_id"] = callback.from_user.id
    data["username"] = callback.from_user.username

    await StateUtils.send_contractor_summary(
        message=callback,
        data=data,
        chat_id=settings.INVOICE_CHAT_ID
    )
    
    sent = await callback.message.answer(
        (f"üì© –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n"
        f"–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞.\n"
        f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    )
    
    await asyncio.sleep(15)
    
    await sent.delete()
    
    
@router.callback_query(F.data.startswith("answer_to_client:"))
async def handle_answer_invoice(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ PDF-—Ñ–∞–π–ª–∞.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    user_id = int(callback.data.split(":")[1])
    username = callback.data.split(":")[2]
    
    sent = await callback.message.edit_text(
        text="üìé –ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª —Å –Ω–∞–∫–ª–∞–¥–Ω–æ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.",
    )
    
    await state.set_state(SendInvoice.waiting_for_invoice)
    await state.update_data(user_id=user_id, username=username, last_bot_message=sent.message_id)

    await callback.answer()
    
    
@router.callback_query(F.data.startswith("reject_answer:"))
async def reject_invoice(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    data = await StateUtils.prepare_next_state(obj=callback, state=state)
    user_id = callback.data.split(":")[1]

    sent = await callback.message.bot.send_message(
        chat_id=user_id,
        text=(
            "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É +7 (904)-280-30-01"
        )
    )

    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ.")
    

@router.callback_query(F.data == "customers")
async def get_customers_pagination_bot_handler(callback: CallbackQuery, state: FSMContext):
    
    page = 1
    per_page = 10
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{settings.BASE_FASTAPI_URL}/customers/all_customers",
                params={"page": page, "per_page": per_page}
            )
            
            response.raise_for_status()
            
        except httpx.HTTPError as e:
            sent = await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {str(e)}")
            return
    
    data = response.json()
    clients = data["users"]
    total_pages = data["total_pages"]
        
    keyboard = await AdminKeyboards.get_customers(
        clients=clients,
        page=page,
        total_pages=total_pages
    )
    
    await callback.message.edit_text(
       " üë• –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã, –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ –æ—Ç–¥–µ–ª–æ–º –ø—Ä–æ–¥–∞–∂ –≤ –≥–æ—Ä–æ–¥–µ –î–∞–Ω–∫–æ–≤, –ø–æ –∞–¥—Ä–µ—Å—É: 1-–π –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫, 3",
       reply_markup=keyboard
    )