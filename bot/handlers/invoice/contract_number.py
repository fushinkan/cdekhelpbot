import httpx
from aiogram.fsm.context import FSMContext
from aiogram import F, Router
from aiogram.types import CallbackQuery


from app.core.config import settings
from app.api.handlers.get_user import UserInDB
from app.api.utils.normalize import normalize_phone
from bot.utils.exceptions import UserNotExistsException, IncorrectPhoneException
from bot.states.invoice import InvoiceForm
from bot.keyboards.backbuttons import BackButtons
from bot.utils.state import StateUtils

import asyncio


router = Router()


@router.callback_query(F.data == "create_invoice")
async def get_contract_number(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'create_invoice'.

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    await callback.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–∫–ª–∞–¥–Ω—É—é.")
    await asyncio.sleep(0.2)
    
    data = await state.get_data()
    phone_raw = data.get("phone")
    phone_number = await normalize_phone(phone=phone_raw)
    
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{settings.BASE_FASTAPI_URL}/user/phone/{phone_number}"
            )
            
            response.raise_for_status()
            user_data = response.json()
            
            contract_number = user_data.get("contract_number")
            await state.update_data(contract_number=contract_number)
            await state.set_state(InvoiceForm.departure_city)
            await StateUtils.push_state_to_history(state=state, new_state=InvoiceForm.departure_city)

            sent = await callback.message.edit_text(
                "üèô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                reply_markup=await BackButtons.back_to_menu()
            )
            await state.update_data(last_bot_message=sent.message_id)

        except (UserNotExistsException, IncorrectPhoneException) as e:
            sent = await callback.message.answer(str(e))
            await asyncio.sleep(2)
            await sent.delete()
            await callback.message.delete()

        except httpx.HTTPError:
            sent = await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await asyncio.sleep(2)
            await sent.delete()
            await callback.message.delete()  