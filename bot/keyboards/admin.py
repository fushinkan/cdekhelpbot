from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

class AdminKeyboards():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    
    @classmethod
    async def get_admin_kb(cls):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

        Returns:
            InlineKeyboardMarkup: –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
        """
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="customers"), 
             InlineKeyboardButton(text="üÜï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", callback_data="add_contractor")],
            [InlineKeyboardButton(text="üëî –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="add_admin")], 
            [InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="back_to_welcoming_screen")]
        ])

    @classmethod
    async def send_answer(cls, user_id: int, username: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ–±—â–µ–º —á–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º.
            username (str): Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º.

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ —á–∞—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
        """
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_to_client:{user_id}:{username}"),
             InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"reject_answer:{user_id}:{username}")]
        ])
        
    @classmethod
    async def get_customers(cls, *, clients: list[dict], page: int, total_pages: int) -> InlineKeyboardMarkup:
        """
        –° –ø–æ–º–æ—â—å—é KeyboardBuilder'–∞ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

        Args:
            clients (list): –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–æ–±—ä–µ–∫—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ `.id` –∏ `.contractor`)
            page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        """

        keyboard = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        for client in clients:
            keyboard.add(
                InlineKeyboardButton(
                    text=client["contractor"],
                    callback_data=f"client_{client["id"]}"
                )
            )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"forward_page_{page - 1}"
                )
            )
        if page < total_pages:
            pagination_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"backward_page_{page + 1}"
                )
            )

        if pagination_buttons:
            keyboard.row(*pagination_buttons)

        return keyboard.adjust(2).as_markup()