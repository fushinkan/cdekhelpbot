from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from datetime import datetime


class CustomerKeyboards():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    @classmethod
    async def password_kb(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="set_password"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")],
        ])
    
    @classmethod  
    async def customer_kb(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞–∫–ª–∞–¥–Ω–∞—è", callback_data="create_invoice"), InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [InlineKeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data="tariffs"), InlineKeyboardButton(text="‚ûï –£—Å–ª—É–≥–∏", callback_data="services")],
            [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="history")],
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä—á", callback_data="get_merch")],
            [InlineKeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="back_to_welcoming_screen")]
        ])
        
    @classmethod
    async def edit_or_confirm(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="edit_invoice_departure_city"), InlineKeyboardButton(text="‚úèÔ∏è –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data="edit_invoice_recipient_city")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="edit_invoice_departure_address"), InlineKeyboardButton(text="‚úèÔ∏è –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="edit_invoice_recipient_address")],
            [InlineKeyboardButton(text="‚úèÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data="edit_invoice_recipient_phone"), InlineKeyboardButton(text="‚úèÔ∏è –°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏", callback_data="edit_invoice_insurance_amount")],
            
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"), 
             InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        
        
    @classmethod
    async def extra_services(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="yes"), InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no")]
        ])
        
        
    @classmethod
    async def edit_or_confirm_agreement(cls):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–ù–ù", callback_data="edit_contractor_tin_number"), InlineKeyboardButton(text="‚úèÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="edit_contractor_phone")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data="allow_agreement"), InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_welcoming_screen")]
        ])
        
    
    @classmethod
    async def get_main_titles(cls, *, titles: list[str], callback_prefix: str, data: dict):
        """
        –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–∞—Ä–∏—Ñ—ã' —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Ç–∞—Ä–∏—Ñ–∞–º–∏

        Args:
            titles (list[str]): –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.
            callback_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é CallbackQuery.
            data (dict): user_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (admin_panel –∏–ª–∏ back_to_menu)

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
        """
        
        keyboard = InlineKeyboardBuilder()
        
        for title in titles:
            keyboard.add(
                InlineKeyboardButton(
                    text=title,
                    callback_data=f"{callback_prefix}:{title}"
                )
            )
        
        callback_data = "admin_panel" if data.get("role") == "admin" else "back_to_menu"
        
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=callback_data
            )
        )
        
        return keyboard.adjust(2).as_markup()
    
    
    @classmethod
    async def get_sub_titles(cls, *, subtitles: list[str], callback_prefix: str):
        """
        –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ —Ç–∞—Ä–∏—Ñ '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤' —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—É–±—Ç–∞—Ä–∏—Ñ–æ–≤.
        
        Args:
            subtitles (list[str]): –°—É–±—Ç–∞—Ä–∏—Ñ—ã.
            callback_prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é CallbackQuery.

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
        """
        
        keyboard = InlineKeyboardBuilder()
        
        for sub in subtitles:
            keyboard.add(
                InlineKeyboardButton(
                    text=sub,
                    callback_data=f"{callback_prefix}:{sub}"
                )
            )
        
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="tariffs"
            )
        )    
            
        return keyboard.adjust(1).as_markup()
    
    
    @classmethod
    async def get_back_to_parent_tariff(cls, *, parent_tariff: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–∞—Ä–∏—Ñ—É '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤'.

        Args:
            parent_tariff (str): –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        
        keyboard = InlineKeyboardBuilder()
        
        keyboard.add(
            InlineKeyboardButton(
                text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"tariff:{parent_tariff}"
            )
        )
        
        return keyboard.as_markup()
    
    
    @classmethod
    async def get_years_keyboard(cls, *, years: list[int], data: dict):
        """
        –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò—Å—Ç–æ—Ä–∏—è' —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏-–≥–æ–¥–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            years (list[int]): –°–ø–∏—Å–æ–∫ —Å –≥–æ–¥–∞–º–∏. [2025 –∏ —Ç.–¥.]
            data (dict): user_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (admin_panel –∏–ª–∏ back_to_menu)

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
        """
        
        keyboard = InlineKeyboardBuilder()
        
        for year in years:
            keyboard.add(
                InlineKeyboardButton(
                    text=str(year),
                    callback_data=f"year:{year}"
                )
            )
        
        callback_data = "admin_panel" if data.get("role") == "admin" else "back_to_menu"
        
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=callback_data
            )
        )   
        
        return keyboard.adjust(1).as_markup()
    
    
    @classmethod
    async def get_months_by_year_keyboard(cls, *, months: list[int], year: int, data: dict):
        """
        –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–∞–∫–æ–π –ª–∏–±–æ –≥–æ–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏-–º–µ—Å—è—Ü–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            months (list[int]): –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤. [1, 2 –∏ —Ç.–¥.]
            year (int): –ì–æ–¥ –∑–∞–∫–∞–∑–∞.
            data (dict): user_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (admin_panel –∏–ª–∏ back_to_menu)

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
        """
        
        keyboard = InlineKeyboardBuilder()
        
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }
        
        for month in months:
            keyboard.add(
                InlineKeyboardButton(
                    text=month_names.get(month, f"{'month'}"),
                    callback_data=f"month:{year}:{month}"
                )
            )
            
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="history"
            )
        )
        
        return keyboard.adjust(2).as_markup()


    @classmethod
    async def get_invoices_by_month_year_keyboard(cls, *, invoices: list[dict], year: int):
        """
        –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –º–µ—Å—è—Ü —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏.

        Args:
            invoices (list[dict]): –°–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
                —Å–æ–¥–µ—Ä–∂–∏—Ç keys: departure_city, recipient_city, invoice_id.

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
        """

        keyboard = InlineKeyboardBuilder()

        for invoice in invoices:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO
            dt = datetime.fromisoformat(invoice["created_at"])
            day = dt.day

            text = f"({day}) {invoice['departure_city']} - {invoice['recipient_city']}"
            keyboard.add(
                InlineKeyboardButton(
                    text=text,
                    callback_data=f"invoice:{invoice['invoice_id']}"
                )
            )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"year:{year}"
            )
        )

        count = len(invoices)

        if count <= 2:
            keyboard.adjust(1)
        elif 3 <= count <= 6:
            keyboard.adjust(2)
        elif 7 <= count <= 12:
            keyboard.adjust(3)
        else:
            keyboard.adjust(4)

        return keyboard.as_markup()