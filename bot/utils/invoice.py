import asyncio

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.utils.delete_messages import delete_prev_messages
from bot.keyboards.customer import CustomerKeyboards
from bot.states.invoice import InvoiceForm
from bot.states.invoice import INVOICE_STATE

class StateUtils():
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    
    @classmethod
    async def get_summary(cls, message: Message, data: dict):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –µ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        summary = (
            f"üì¶ <b>–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!</b>\n\n"
            f"üìÑ –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {data.get('contract_number')}\n"
            f"üöö –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departure_city')}\n"
            f"üè† –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departure_address')}\n"
            f"üìû –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data.get('recipient_phone')}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data.get('recipient_city')}\n"
            f"üè° –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('recipient_address')}\n"
            f"üí∞ –°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {data.get('insurance_amount')} ‚ÇΩ"
        )

        sent = await message.answer(summary, reply_markup=await CustomerKeyboards.edit_or_confirm(), parse_mode="HTML")
        
        return sent
    
    @classmethod
    async def push_state_to_history(cls, state: FSMContext, new_state: InvoiceForm):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é, –¥–ª—è –æ—Ç–∫–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø.
        """
        data = await state.get_data()
        history = data.get("state_history", [])
        history.append(new_state.state)
        await state.update_data(state_history=history)
    
    @classmethod
    async def pop_state_from_history(cls, state: FSMContext):
        """
        –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞.
        """
        data = await state.get_data()
        history = data.get("state_history", [])
        
        if history:
            history.pop()
            if history:
                prev_state = history[-1]
                for st in INVOICE_STATE:
                    if st.state == prev_state:
                        await state.set_state(st)
                        await state.update_data(state_history=history)
                        return st
            else:
                await state.update_data(state_history=history)
        return None
    
    
    @classmethod
    async def handle_step(
        message: Message,
        state: FSMContext,
        field_name: str,
        next_state,
        prompt_text: str,
        back_keyboard,
        validator=None
    ):
        data = await state.get_data()
        last_bot_message_id = data.get("last_bot_message")
        value = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if validator:
            try:
                await validator(value)
            except Exception as e:
                sent = await message.answer(str(e), parse_mode="HTML")
                await asyncio.sleep(5)
                await sent.delete()
                await message.delete()
                return

        await asyncio.sleep(0.3)
        await message.delete()
        await delete_prev_messages(message, last_bot_message_id)

        await state.update_data({field_name: value})
        await state.set_state(next_state)
        await StateUtils.push_state_to_history(state, next_state)

        sent = await message.answer(prompt_text, reply_markup=await back_keyboard())
        await state.update_data(last_bot_message=sent.message_id)