from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from bot.utils.bot_utils import BotUtils
from bot.states.invoice import InvoiceForm
from bot.states.invoice import INVOICE_STATE
from bot.keyboards.admin import AdminKeyboards
from bot.keyboards.customer import CustomerKeyboards

import asyncio
from typing import Union


class StateUtils():
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram-–±–æ—Ç–µ.
    """
    
    @classmethod
    async def get_summary(cls, message: Message, data: dict):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        Args:
            message (Message): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
            data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–≤–æ–¥–∫–æ–π.
        """
        
        summary = (
            f"üì¶ <b>–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!</b>\n\n"
            f"üìÑ –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {data.get('contract_number')}\n"
            f"üöö –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departure_city')}\n"
            f"üè† –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departure_address')}\n"
            f"üìû –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data.get('recipient_phone')}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data.get('recipient_city')}\n"
            f"üè° –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('recipient_address')}\n"
            f"üí∞ –°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {data.get('insurance_amount')} ‚ÇΩ"
        )

        sent = await message.answer(summary, reply_markup=await CustomerKeyboards.edit_or_confirm(), parse_mode="HTML")
        
        return sent
    
    @classmethod
    async def send_summary(cls, message: Message | CallbackQuery, data: dict, chat_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

        Args:
            message (Message | CallbackQuery): –û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.
            data (dict): –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
            chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Returns:
            Message | None: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω.
        """
        
        summary = (
            f"üì¶ <b>–°–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è @{data.get('user_full_name')}</b>\n\n"
            f"üìÑ –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {data.get('contract_number')}\n"
            f"üöö –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departure_city')}\n"
            f"üè† –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data.get('departure_address')}\n"
            f"üìû –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data.get('recipient_phone')}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data.get('recipient_city')}\n"
            f"üè° –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('recipient_address')}\n"
            f"üí∞ –°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è: {data.get('insurance_amount')} ‚ÇΩ"
        )

        if chat_id:
            
            sent = await message.bot.send_message(chat_id=chat_id, text=summary, parse_mode="HTML", reply_markup=await AdminKeyboards.send_answer())
        
        return sent
    
    
    @classmethod
    async def push_state_to_history(cls, state: FSMContext, new_state: InvoiceForm):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞.

        Args:
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
            new_state (InvoiceForm): –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        
        data = await state.get_data()
        history = data.get("state_history", [])
        history.append(new_state.state)
        await state.update_data(state_history=history)
    
    @classmethod
    async def pop_state_from_history(cls, state: FSMContext):
        """
        –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.

        Args:
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

        Returns:
            InvoiceForm | None: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç.
        """
        
        data = await state.get_data()
        history = data.get("state_history", [])
        
        if history:
            history.pop()
            
            if history:
                prev_state = history[-1]
                
                for st in INVOICE_STATE:
                    if st.state == prev_state:
                        await state.set_state(st)
                        await state.update_data(state_history=history)
                        return st
                    
            else:
                await state.update_data(state_history=history)
                
        return None
    
    
    @classmethod
    async def prepare_next_state(cls, obj: Union[Message, CallbackQuery], state: FSMContext) -> dict:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.

        Args:
            obj (Message | CallbackQuery): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback.
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

        Returns:
            dict: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        """
        
        await asyncio.sleep(0.3)
        
        data = await state.get_data()
        last_bot_message_id = data.get("last_bot_message")
        message = None
        
        if isinstance(obj, CallbackQuery):
            await obj.answer()
            
            try:
                await obj.message.delete()
                
            except TelegramBadRequest:
                pass
            
            message = obj.message
            
        else:
            try:
                await obj.delete()    
                  
            except TelegramBadRequest:
                pass
            
            message = obj  
            
        if message and last_bot_message_id:
            await BotUtils.delete_prev_messages(message, last_bot_message_id)
   
        return data
    
    
    @classmethod
    async def edit_invoice(cls, data: dict, message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É.

        Args:
            data (dict): –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

        Returns:
            bool: True, –µ—Å–ª–∏ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        
        if data.get("editing_field"):
            await state.update_data(editing_field=None)
            
            updated_data = await state.get_data()
            updated_summary = await StateUtils.get_summary(message, updated_data)
            
            await state.update_data(last_bot_message_id=updated_summary.message_id)
            await BotUtils.delete_prev_messages(message, updated_data.get("last_bot_message_id"))
            return True
        
        return False
            