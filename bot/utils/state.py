from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.core.config import settings
from bot.utils.bot_utils import BotUtils
from bot.states.invoice import InvoiceForm
from bot.states.invoice import INVOICE_STATE
from bot.states.customer import CUSTOMER_STATE
from bot.keyboards.admin import AdminKeyboards
from bot.keyboards.customer import CustomerKeyboards
from bot.utils.storage import AdminText, CustomerText

import asyncio
from typing import Union


# –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
ALL_STATES_SET = INVOICE_STATE | CUSTOMER_STATE  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∏–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
ALL_STATES = {state: state for state in ALL_STATES_SET}


class StateUtils():
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram-–±–æ—Ç–µ.
    """

    @classmethod
    async def show_customer_summary(cls, *, message: Message, data: dict):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–≤–æ–¥–∫—É –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É.

        Args:
            message (Message): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
            data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.

        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π.
        """
        
        
        summary = AdminText.NEW_CONTRACTOR_TEXT.format(
            contractor=data.get('contractor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            city=data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            contract_number=data.get('contract_number', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            phone=data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')
        )
        
        sent = await message.answer(summary, reply_markup=await AdminKeyboards.edit_or_confirm_customer(), parse_mode="HTML")
        
        return sent
    
    
    @classmethod
    async def format_contractor_summary(cls, *, message: Message, data: dict, for_admin: bool):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        Args:
            message (Message): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
            data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π.
        """
        
        if for_admin:
            header = f"üíº <b>–°–≤—è–∑–∞—Ç—å—Å—è –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ —Å @{data.get('username')}!</b>"
        
        else:
            header = f"üíº <b>–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!</b>"
        
        return CustomerText.CONTRACTOR_TEXT.format(
            header=header,
            tin_number=data.get('tin_number'),
            phone=data.get('phone')
        )

    
    @classmethod
    async def send_contractor_summary(cls, *, message: Message | CallbackQuery, data: dict, for_admin: bool):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

        Args:
            message (Message | CallbackQuery): –û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.
            data (dict): –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
            chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
        """
        
        summary = await cls.format_contractor_summary(data=data, message=message, for_admin=for_admin)
        
        if for_admin:
            chat_id = settings.INVOICE_CHAT_ID        
            sent = await message.bot.send_message(chat_id=chat_id, text=summary, parse_mode="HTML")
        
        else:
            sent = await message.answer(summary, reply_markup=await CustomerKeyboards.edit_or_confirm_agreement(), parse_mode="HTML")

        return sent
        
        
    @classmethod
    async def format_summary(cls, *, message: Message, data: dict, for_admin: bool):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–¥–∫—É –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

        Args:
            message (Message): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
            data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.

        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π.
        """
        
        if for_admin:
            header = f"üì¶ <b>–°–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è @{data.get('username')}</b>"
        
        else:
            header = f"üì¶ <b>–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!</b>"
        
        return CustomerText.INVOICE_TEXT.format(
            header=header,
            contract_number=data.get('contract_number'),
            departure_city=data.get('departure_city'),
            departure_address=data.get('departure_address'),
            recipient_phone=data.get('recipient_phone'),
            recipient_city=data.get('recipient_city'),
            recipient_address=data.get('recipient_address'),
            insurance_amount=data.get('insurance_amount'),
            extra=data.get('extra', '–ù–µ—Ç')
        )
    
    
    @classmethod
    async def send_summary(cls, *, message: Message | CallbackQuery, data: dict, for_admin: bool):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

        Args:
            message (Message | CallbackQuery): –û–±—ä–µ–∫—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.
            data (dict): –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
            chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
        """
        
        summary = await cls.format_summary(data=data, for_admin=for_admin, message=message)

        if for_admin:
            chat_id = settings.INVOICE_CHAT_ID
            sent = await message.bot.send_message(chat_id=chat_id, text=summary, parse_mode="HTML", 
                                                  reply_markup=await AdminKeyboards.send_answer(user_id=data.get("user_id"), username=data.get("username")))
        else:
            sent = await message.answer(text=summary, reply_markup=await CustomerKeyboards.edit_or_confirm(), parse_mode="HTML")
        
        return sent
    
    
    @classmethod
    async def push_state_to_history(cls, *, state: FSMContext, new_state: InvoiceForm):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞.

        Args:
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
            new_state (InvoiceForm): –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        
        data = await state.get_data()
        history = data.get("state_history", [])
        history.append(new_state.state)
        await state.update_data(state_history=history)
    
    
    @classmethod
    async def pop_state_from_history(cls, *, state: FSMContext):
        """
        –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.

        Args:
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

        Returns:
            InvoiceForm.State | None: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç.
        """
        
        data = await state.get_data()
        history = data.get("state_history", [])

        if not history:
            return None

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        history.pop()

        if not history:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            await state.update_data(state_history=history)
            return None

        prev_state_str = history[-1]
        prev_state = ALL_STATES.get(prev_state_str)


        if prev_state is None:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –≤–µ—Ä–Ω—É—Ç—å None
            await state.update_data(state_history=[])
            return None

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        await state.set_state(prev_state)
        await state.update_data(state_history=history)

        return prev_state

    
    @classmethod
    async def prepare_next_state(cls, *, obj: Union[Message, CallbackQuery], state: FSMContext) -> dict:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.

        Args:
            obj (Message | CallbackQuery): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback.
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

        Returns:
            dict: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        """
        
        await asyncio.sleep(0.1)
        
        data = await state.get_data()
        last_bot_message_id = data.get("last_bot_message")
        error_message_id = data.get("error_message")
        message = None
        
        if isinstance(obj, CallbackQuery):
            await obj.answer()
            
            try:
                await obj.message.delete()
                
            except TelegramBadRequest:
                pass
            
            message = obj.message
            
        else:
            try:
                await obj.delete()    
                  
            except TelegramBadRequest:
                pass
            
            message = obj  
            
        if message:
            if last_bot_message_id:
                await BotUtils.delete_prev_messages(obj=message, message_id=last_bot_message_id)
            if error_message_id:
                await BotUtils.delete_prev_messages(obj=message, message_id=error_message_id)
   
        return data
    
    
    @classmethod
    async def edit_invoice_or_data(cls, *, data: dict, message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É.

        Args:
            data (dict): –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
            message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
            state (FSMContext): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

        Returns:
            bool: True, –µ—Å–ª–∏ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        
        if data.get("editing_field"):
            await state.update_data(editing_field=None)
            
            updated_data = await state.get_data()
            current_state = await state.get_state()
            
            if current_state and current_state.startswith("InvoiceForm:"):
                updated_summary = await StateUtils.send_summary(message=message, data=updated_data, for_admin=False)
            elif current_state and current_state.startswith("Contractor:"):
                updated_summary = await StateUtils.send_contractor_summary(message=message, data=updated_data, for_admin=False)
            elif current_state and current_state.startswith("Customer:") :
                updated_summary = await StateUtils.show_customer_summary(message=message, data=updated_data)            
            
            await state.update_data(last_bot_message_id=updated_summary.message_id)
            await BotUtils.delete_prev_messages(obj=message, message_id=updated_data.get("last_bot_message_id"))
            return True
        
        return False